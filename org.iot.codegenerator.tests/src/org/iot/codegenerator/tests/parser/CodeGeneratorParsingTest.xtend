/*
 * generated by Xtext 2.20.0
 */
package org.iot.codegenerator.tests.parser

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.iot.codegenerator.codeGenerator.DeviceConf
import org.iot.codegenerator.tests.CodeGeneratorInjectorProvider
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.jupiter.api.Assertions.*
import org.eclipse.xtext.testing.validation.ValidationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(CodeGeneratorInjectorProvider)
class CodeGeneratorParsingTest {
	
	@Inject extension ParseHelper<DeviceConf>
	@Inject extension ValidationTestHelper
	
	@Test
	def void testParsing() {
		val model = '''
			language python
			channel endpoint
			channel serial
			
			board esp32 version wrover
				in serial 
			    
				sensor motion as m(a, b, c)  
					sample signal
					 
					data motion
						out endpoint m
		'''.parse
		
		val board = model.board.get(0)
	
		assertEquals("esp32", board.name)

	}
	
	
	@Test // Should fail
	def void testCorrectParsin(){
		'''
		language python
		channel endpoint
		channel serial
		
		abstract board esp32_temperature extends esp32
			in serial 
			   
			// External temperature sensor that reads from pins
			sensor temperature (12) as temperature(a)
				sample frequency 10
				
				data celcius
					out serial temperature.map["Temp: " + b -> b]
		
		
		abstract board esp32 extends esp32_temperature
			in serial 
		    
			sensor motion as m(a, b, c)  
				sample signal
				 
				data motion
					out endpoint m
		    	
			// Onboard sensor connected over I2C
			override sensor motion as m(a, b, c)  
				sample signal
				
				data motion
					out endpoint m
		'''.parse.assertNoErrors
	}
	
}
